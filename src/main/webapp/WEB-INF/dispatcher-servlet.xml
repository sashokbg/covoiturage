<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd ">

	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
			<set>
				<ref bean="roleFormatter" />
				<ref bean="userFormatter" />
				<ref bean="dateFormatter" />
			</set>
		</property>
	</bean>

	<!-- Configures @Controller, @RequestMapping and so on -->
	<mvc:annotation-driven conversion-service="conversionService" />
	<!-- Maps the location /resources/ to any request starting with /resources/ 
		ex. /resources/js/jQuery.js -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!-- Allows @Transactional. Attention this declaration should be used in 
		the same context as <mvc:annotationDriven> other ways it does not work -->
	<tx:annotation-driven />
	<!-- Allows @Autowired -->
	<context:annotation-config />
	<!-- Scan @Component and @Service for autowiring candidates -->
	<context:component-scan base-package="bg.alexander.*" />

	<!-- Spring i18n message bundle "reader" -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>

	<!-- Resolve locale as request attribute. Ex /my-url.html?locale=en_us -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="locale" />
		</bean>
	</mvc:interceptors>
	<!-- END Spring i18n -->

	<!-- **************************************************************** -->
	<!-- THYMELEAF-SPECIFIC ARTIFACTS -->
	<!-- TemplateResolver <- TemplateEngine <- ViewResolver -->
	<!-- **************************************************************** -->

	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/templates/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<property name="cacheable" value="false" />
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<!-- These lines add the dialect to Thymeleaf -->
		<property name="additionalDialects">
			<set>
				<bean class="nz.net.ultraq.thymeleaf.LayoutDialect" />
			</set>
		</property>
	</bean>

	<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
	</bean>

	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
	<!-- <property name="prefix"> -->
	<!-- <value>/WEB-INF/views/</value> -->
	<!-- </property> -->
	<!-- <property name="suffix"> -->
	<!-- <value>.jsp</value> -->
	<!-- </property> -->
	<!-- </bean> -->
</beans>